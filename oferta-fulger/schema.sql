-- This schema should be run in the Supabase SQL Editor.
-- It is broken down into steps. Run them one by one if you encounter issues.

-- 1. Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  full_name text,
  avatar_url text,
  website text,
  role text default 'CUSTOMER'
);

-- 2. Set up Row Level Security (RLS) for profiles
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- 3. Create a table for deals
create table deals (
  id bigint generated by default as identity primary key,
  merchant_id uuid references profiles(id) not null,
  created_at timestamp with time zone default now(),
  title text not null,
  description text,
  original_price numeric not null,
  deal_price numeric not null,
  discount_percentage numeric generated always as (((original_price - deal_price) / original_price) * 100) stored,
  image_url text,
  coupons_total integer not null,
  coupons_sold integer default 0,
  expires_at timestamp with time zone,
  is_active boolean default false
);

-- 4. Set up RLS for deals
alter table deals enable row level security;

create policy "Deals are viewable by everyone." on deals
  for select using (is_active = true);

create policy "Merchants can insert their own deals." on deals
  for insert with check (
    auth.uid() = merchant_id and
    (select role from profiles where id = auth.uid()) = 'MERCHANT'
  );

create policy "Merchants can update their own deals." on deals
  for update using (
    auth.uid() = merchant_id and
    (select role from profiles where id = auth.uid()) = 'MERCHANT'
  );

-- 5. Create a table for purchases/coupons
create table purchases (
  id bigint generated by default as identity primary key,
  user_id uuid references profiles(id) not null,
  deal_id bigint references deals(id) not null,
  created_at timestamp with time zone default now(),
  coupon_code text unique not null default extensions.uuid_generate_v4(),
  is_redeemed boolean default false,
  redeemed_at timestamp with time zone
);

-- 6. Set up RLS for purchases
alter table purchases enable row level security;

create policy "Users can view their own purchases." on purchases
  for select using (auth.uid() = user_id);

create policy "Users can insert their own purchases." on purchases
  for insert with check (auth.uid() = user_id);

-- 7. This trigger automatically creates a profile for new users.
-- This ensures that every new user in the 'auth.users' table gets a corresponding profile in the 'public.profiles' table.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, role)
  values (new.id, 'CUSTOMER');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();